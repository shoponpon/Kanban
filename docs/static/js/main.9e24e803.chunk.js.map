{"version":3,"sources":["Card.jsx","Navigation.jsx","CardList.jsx","CreateModal.jsx","App.js","serviceWorker.js","index.js"],"names":["SDeleteButton","styled","button","SCard","div","Card","title","removeCard","onClick","SLogo","SNavigation","Navigation","SCardList","CardList","children","SCreateModal","SForm","form","CreateModal","onAddCard","onCloseModal","useState","state","setState","onSubmit","e","preventDefault","stopPropagation","type","defaultValue","onChange","target","value","SCardLists","SButton","SAddListButton","SListTitle","App","cardLists","cards","targetListIndex","shownCreateCardModal","shownCreateCardListModal","updateState","newState","closeCreateCardModal","closeCreateCardListModal","setCards","map","_","listIndex","newCards","newCardList","push","addCardList","newCard","addCard","list","setList","newCardLists","setCardLists","group","animation","style","display","cardDoms","card","cardIndex","splice","key","flexGrow","openCreateCardModal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e24e803.chunk.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\n\nconst SDeleteButton = styled.button`\n    font-size: 0.75rem;\n    color: #888;\n    border: none;\n    background: transparent;\n    &:focus {\n        outline: 0;\n    }\n`\n\nconst SCard = styled.div`\n    border: 1px solid rgba(0,0,0,.125);\n    border-radius: .25rem;\n    background: #eee;\n    box-shadow: 0 1px 0 rgba(9,30,66,.25);\n\n    padding: 6px 8px;\n\n    cursor: pointer;\n    &:hover {\n        background: #ddd;\n    }\n`\n\nfunction Card({ title, removeCard }) {\n\treturn (\n        <SCard>\n            <p>{ title }</p>\n            <SDeleteButton onClick={() => {\n                removeCard()\n            }}>削除</SDeleteButton>\n        </SCard>\n    )\n}\nexport default Card\n","// Navigation.jsxを作成\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst SLogo = styled.div`\n    font-size: 24px; // フォントサイズ24pxで\n    user-select: none; // 選択不可にしてテキスト感をなくす\n    font-family: 'Pacifico', cursive; // importしたwebフォントを適用\n`\n\nconst SNavigation = styled.div` // styled-componentsで定義\n    width: 100%;\n    color: white; // 文字の色は白\n    background: #0f3460; // それっぽい色\n    & > * {\n        padding: 12px 30px; // それっぽい余白\n    }\n`\nconst Navigation = () => {\n    return <SNavigation><SLogo>Kanban</SLogo></SNavigation>\n}\nexport default Navigation\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst SCardList = styled.div`\n  display: flex; // レイアウトにはflexを使用\n  flex-direction: column; // flexはdefaultで横並びになるのでカードを縦に並べる設定\n\n  width: 272px; // 適当なカードリスト幅\n  min-height: 500px; // それっぽい高さ\n  margin: 30px 30px 30px 0px; // 適当な余白\n  padding: 5px; // 適当な内余白\n  box-sizing: border-box; // おまじない\n  cursor: pointer; // カーソルを変更してそれっぽく\n  background: #ebecf0; // それっぽい背景色\n  border-radius: .25rem; // それっぽく角を丸める\n  & > * {\n      // つまり感排除のための余白を子（カード）全てに設定\n      margin-bottom: 5px; \n  }\n`\n\nconst CardList = ({ children }) => {\n    return (\n        <SCardList>{ children }</SCardList>\n    )\n}\nexport default CardList\n","import React, { useState } from \"react\"\nimport styled from \"styled-components\"\n\nconst SCreateModal = styled.div`\n    position: fixed;\n    top: 0; right: 0; bottom: 0; left: 0;\n    background: rgba(0, 0, 0, .6);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst SForm = styled.form`\n    background: #fff;\n    width: 300px;\n    display: flex;\n    flex-direction: column;\n    padding: 20px 20px 10px 20px;\n    & > * {\n        margin-bottom: 10px;\n    }\n`\n\nconst CreateModal = ({ onAddCard, onCloseModal }) => {\n\n    const [state, setState] = useState({\n        title: ''\n    })\n    const { title } = state\n\n    return (\n        <SCreateModal onClick={onCloseModal}>\n            <SForm onSubmit={(e) => {\n                e.preventDefault()\n                onAddCard({ title })\n            }} onClick={(e) => {\n                e.stopPropagation()\n            }}>\n                <input type=\"text\" defaultValue={title} onChange={(e) => {\n                    setState({ title: e.target.value })\n                }}/>\n                <input type=\"submit\" value=\"追加\"/>\n            </SForm>\n        </SCreateModal>\n    )\n}\n\nexport default CreateModal;","import React, { useState } from 'react';\nimport { ReactSortable } from 'react-sortablejs'\nimport Card from \"./Card\"\nimport Navigation from \"./Navigation\"\nimport CardList from \"./CardList\"\nimport styled from \"styled-components\"\nimport CreateModal from \"./CreateModal\"\n\nconst SCardLists = styled.div`\n  display: flex;\n  width: 100%;\n  padding-left: 30px; // 一番左の調整用余白\n  box-sizing: border-box;\n`\n\nconst SButton = styled.button`\n  border: none; // 枠線の削除\n  border-radius: .25rem; // それっぽい角丸\n  box-sizing: border-box; // おまじない\n  padding: 0.5rem; // それっぽい余白\n  color: rgba(0,0,0,.5); // 文字色を薄くそれっぽく\n  background: transparent; // 背景に馴染ませる\n  &:focus { // 押した時の青線を削除\n    outline: 0;\n}\n\n&:hover { // カーソルを合わせた時に色が少し変わるように\n    color: rgba(0,0,0,.8);\n    background: rgba(0,0,0,.125);\n}\n`\n\nconst SAddListButton = styled(SButton)`\n  margin: 30px 30px 30px 0px;\n  min-width: 128px;\n`\n\nconst SListTitle = styled.div`\n    font-weight: bold;\n    padding: 5px;\n`\n\nfunction App() {\n  const [ state, setState ] = useState({\n    cardLists: [\n      {\n        title: 'リストタイトルA',\n        cards: [{ title: 'カードタイトル' }]\n      },\n      {\n        title: 'リストタイトルB',\n        cards: [{ title: 'カードタイトル' }]\n      },\n      {\n        title: 'リストタイトルC',\n        cards: [{ title: 'カードタイトル' }]\n      }\n    ],\n    targetListIndex: -1,\n    shownCreateCardModal: false,\n    shownCreateCardListModal: false\n  })\n  const { cardLists, targetListIndex, shownCreateCardModal, shownCreateCardListModal } = state\n\n  const updateState = (newState) => setState({ ...state, ...newState })\n\n  const addCard = ( newCard ) => {\n    cardLists[targetListIndex].cards.push(newCard)\n    return { cardLists, ...closeCreateCardModal() }\n  }\n  const removeCard = (listIndex, cardIndex) => {\n    cardLists[listIndex].cards.splice(cardIndex, 1)\n    return { cardLists }\n  }\n  const openCreateCardModal = (targetListIndex) => {\n    return { shownCreateCardModal: true, targetListIndex }\n  }\n  const closeCreateCardModal = () => {\n    return { shownCreateCardModal: false }\n  }\n\n  const addCardList = ( newCardList ) => {\n    cardLists.push({ cards: [], ...newCardList })\n    return { cardLists, ...closeCreateCardListModal() }\n  }\n  const openCreateCardListModal = () => {\n    return { shownCreateCardListModal: true }\n  }\n  const closeCreateCardListModal = () => {\n    return { shownCreateCardListModal: false }\n  }\n\n  const setCards = cardLists.map((_, listIndex) => {\n    return (newCards) => {\n      cardLists[listIndex].cards = newCards\n      return { cardLists }\n    }\n  })\n  const setCardLists = (newCardLists) => {\n    return { cardLists: newCardLists }\n  }\n\n  return (\n    <>\n      { shownCreateCardListModal ? <CreateModal onAddCard={(newCardList) => updateState(addCardList(newCardList))} onCloseModal={() => updateState(closeCreateCardListModal())}/> : <></> }\n      { shownCreateCardModal ? <CreateModal onAddCard={(newCard) => updateState(addCard(newCard))} onCloseModal={() => updateState(closeCreateCardModal())}/> : <></> }\n      <Navigation />\n      <SCardLists>\n        <ReactSortable\n          list={cardLists}\n          setList={(newCardLists) => updateState(setCardLists(newCardLists))}\n          group='cardList'\n          animation={150}\n          style={{ display: 'flex' }}\n        >\n          {\n            cardLists.map(({title, cards}, listIndex) => {\n              const cardDoms = cards.map((card, cardIndex) => <Card title={card.title} removeCard={() => {\n                updateState(removeCard(listIndex, cardIndex))\n              }} key={cardIndex} />)\n              return (\n                <CardList key={listIndex}>\n                  <SListTitle>{ title }</SListTitle>\n                  <ReactSortable\n                    list={cards}\n                    setList={(newCards) => updateState(setCards[listIndex](newCards))}\n                    group='card'\n                    animation={150}\n                    style={{ flexGrow: 1 }}\n                  >\n                    { cardDoms }\n                  </ReactSortable>\n                  <SButton onClick={(e) => {\n                    updateState(openCreateCardModal(listIndex))\n                  }}>追加</SButton>\n                </CardList>\n              )\n            })\n          }\n        </ReactSortable>\n        <SAddListButton onClick={(e) => {\n            updateState(openCreateCardListModal())\n        }}>リストを追加</SAddListButton>\n      </SCardLists>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"normalize.css/normalize.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}